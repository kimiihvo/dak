<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CouponMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="couponMap"
        type="study.spring.dak.model.Coupon">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="coupno" column="coupno" />
        <result property="code" column="code" />
        <result property="title" column="title" />
        <result property="regDate" column="reg_date" />
        <result property="expDate" column="exp_date" />
        <result property="discount" column="discount" />
        <result property="isUsed" column="is_used" />
        <result property="orderOver" column="order_over" />
        <result property="memno" column="memno" />
        
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="study.spring.dak.model.Coupon"
        resultMap="couponMap">
        SELECT * FROM coupon c INNER JOIN member m ON c.memno = m.memno WHERE a.memno= #{memno} AND coupno=#{coupno};
    </select>
    
    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="adminSelectCouponItem"
        parameterType="study.spring.dak.model.Coupon"
        resultMap="couponMap">
        <!-- SELECT * FROM coupon c INNER JOIN member m ON c.memno = m.memno WHERE coupno=#{coupno}; -->
        SELECT * FROM coupon WHERE coupno=#{coupno};
    </select>
    
    
    <select id="selectList"
        parameterType="study.spring.dak.model.Coupon"
        resultMap="couponMap">
        SELECT * FROM coupon c INNER JOIN member m ON c.memno = m.memno WHERE c.memno=#{memno} 
        
        AND (date(exp_date) > date(now()) AND is_used = 'N')
        
        ORDER BY coupno DESC; 
        
    </select>
    
    <select id="selectListExpired"
        parameterType="study.spring.dak.model.Coupon"
        resultMap="couponMap">
        SELECT * FROM coupon c INNER JOIN member m ON c.memno = m.memno WHERE c.memno=#{memno} 
        
        AND (date(now()) >= date(exp_date) OR is_used = 'Y')
        
        ORDER BY coupno DESC; 
        
    </select>
    


    <!-- @ 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem"
        parameterType="study.spring.dak.model.Coupon"
        useGeneratedKeys="true"
        keyProperty="coupno">
        INSERT INTO coupon (memno, code, title, exp_date, discount, order_over) 
        
        	VALUES (#{memno}, #{code}, #{title}, #{expDate}, #{discount}, #{orderOver});
    </insert>

    <!-- @ 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="study.spring.dak.model.Coupon">
        DELETE FROM coupon WHERE coupno=#{coupno};
    </delete>
	
    <!-- (관리자) 데이터 갱신을 위한 기능 정의 (쿠폰은 관리자만 수정 가능)-->
    <update id="updateItem"
        parameterType="study.spring.dak.model.Coupon">
        UPDATE coupon SET memno=#{memno}, code=#{code}, title=#{title}, exp_date=#{expDate}, 
        
        discount=#{discount}, order_over=#{orderOver}, is_used=#{isUsed}
        
        WHERE coupno=#{coupno};
    </update>
    
    
    <!-- 쿠폰 중복 등록 방지 기능을 위한 카운트의 단일행 조회 -->
    <select id="selectItemForCount"
        parameterType="study.spring.dak.model.Coupon"
        resultType="int">
        SELECT COUNT(*) FROM coupon WHERE memno= #{memno} AND code=#{code};
    </select>
    
    
    <!--  (관리자) 쿠폰 목록 조회 -->
    <select id="adminSelectCouponList"
        parameterType="study.spring.dak.model.Coupon"
        resultMap="couponMap">
        SELECT coupno, m.m_id, c.memno, code, title, c.reg_date, exp_date, discount, is_used, order_over 
    
   		FROM coupon c INNER JOIN member m ON c.memno=m.memno 
   		
   		<where>
            <if test="title != null and title != ''">
                title LIKE concat('%', #{title}, '%')
            </if>
        </where>
        
        ORDER BY coupno desc
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
        
    </select>
    
    <!-- 주문페이지에서 사용할 사용가능 쿠폰 조회 -->
    <select id="selectCouponListByMemno"
        parameterType="int"
        resultMap="couponMap">
        SELECT c.coupno, c.title, c.discount, c.exp_date, c.order_over FROM coupon c INNER JOIN member m ON c.memno = m.memno WHERE c.memno= #{memno} AND date(exp_date) >= date(now())
        ORDER BY exp_date DESC; 
    </select>


    <!-- 주문 후 사용한 쿠폰 삭제를 위한 기능 정의 -->
    <delete id="deleteCouponByCoupno"
        parameterType="int">
        DELETE FROM coupon WHERE coupno=#{coupno};
    </delete>

    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll"
        parameterType="study.spring.dak.model.Coupon" resultType="int">
        SELECT COUNT(*)
        FROM coupon
        
        <where>
            <if test="title != null and title != ''">
                title LIKE concat('%', #{title}, '%')
            </if>
        </where>
    </select>
    
    <!-- 회원 탈퇴시 해당 회원의 쿠폰 삭제를 위한 기능 정의 -->
    <delete id="deleteOutMemberCoupon"
        parameterType="study.spring.dak.model.Member">
        DELETE FROM coupon WHERE memno=#{memno};
    </delete>
    
    <!-- 주문 뒤 쿠폰 사용처리 -->
	<update id="updateUsedCoupon" parameterType="study.spring.dak.model.Coupon">
		UPDATE coupon SET is_used="Y" WHERE coupno=#{coupno};
	</update>
	
</mapper>
