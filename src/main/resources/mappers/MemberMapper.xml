<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="memberMap"
        type="study.spring.dak.model.Member">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="memno" column="memno" />
        <result property="memId" column="m_id" />
        <result property="memPw" column="m_pw" />
        <result property="memName" column="m_name" />
        <result property="nick" column="nick" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="birthdate" column="birthdate" />
        <result property="gender" column="gender" />
        <result property="regDate" column="reg_date" />
        <result property="isOut" column="is_out" />
        <result property="isAdmin" column="is_admin" />
    </resultMap>

    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="study.spring.dak.model.Member"
        resultMap="memberMap">
        SELECT * FROM member WHERE memno=#{memno};
    </select>
	
	<!-- 회원 가입 -->
	<insert id="doJoin" parameterType="study.spring.dak.model.Member" useGeneratedKeys="true" keyProperty="memno">
		INSERT INTO member (m_id, m_pw, m_name, nick, phone, email, birthdate, gender) 
		VALUES (#{memId}, SHA2(#{memPw}, 256), #{memName}, #{nick}, #{phone}, #{email}, #{birthdate}, #{gender});
	</insert>
	
	<!-- 회원 정보 수정 -->
	<update id="editMember" parameterType="study.spring.dak.model.Member">
		UPDATE member SET m_pw=SHA2(#{memPw}, 256), nick=#{nick}, phone=#{phone}, email=#{email}, birthdate=#{birthdate}
		WHERE memno=#{memno};
	</update>
	
	<!-- 회원 정보 삭제 -->
	<delete id="deleteMember" parameterType="study.spring.dak.model.Member">
		DELETE FROM member WHERE memno=#{memno};
	</delete>
    
    <!-- 로그인 체크 -->
    <select id="loginCheck"
        parameterType="study.spring.dak.model.Member"
        resultMap="memberMap">
        SELECT memno, m_id, m_name, nick, phone, email, birthdate, gender, reg_date, is_out, is_admin FROM member WHERE m_id=#{memId} AND m_pw=SHA2(#{memPw}, 256);
    </select>
    
    <!-- 아이디 중복검사 -->
    <select id="idCheck" parameterType="study.spring.dak.model.Member" resultType="int">
    	SELECT COUNT(*) FROM member WHERE m_id=#{memId};
    </select>
    
    <!-- 닉네임 중복검사 -->
    <select id="nickCheck" parameterType="study.spring.dak.model.Member" resultType="int">
    	SELECT COUNT(*) FROM member WHERE nick=#{nick};
    </select>
    
    <!-- 이메일 중복검사 -->
    <select id="emailCheck" parameterType="study.spring.dak.model.Member" resultType="int">
    	SELECT COUNT(*) FROM member WHERE email=#{email};
    </select>
    
    <!-- 아이디 찾기 -->
    <select id="findId" parameterType="study.spring.dak.model.Member" resultType="string">
    	SELECT m_id FROM member WHERE m_name=#{memName} AND phone=#{phone};
    </select>
    
    <!-- 임시 비밀번호 설정 -->
    <update id="updatePassword" parameterType="study.spring.dak.model.Member">
		UPDATE member SET m_pw=SHA2(#{memPw}, 256) where m_id=#{memId} AND m_name=#{memName} AND email=#{email}
	</update>
	
	 <!-- 로그인된 경우 해당 세션id와 유효시간을 사용자 테이블에 세팅 -->
    <update id="keepLogin">
        UPDATE member SET session_key = #{sessionId}, session_limit = #{sessionLimit} WHERE m_id=#{memId}
    </update>
     
    <!-- 유효기간이 남아 있으면서 해당 sessionId를 가지는 사용자 정보를 꺼내오는 부분 -->
    <select id="checkUserWithSessionKey" resultMap="memberMap">
        SELECT * FROM member WHERE session_key = #{sessionId} AND session_limit > now()
    </select>    

</mapper>
